resources:
  envoy-proxy-certificate-config:
    # Certificate based EnvoyProxy
    apiVersion: gateway.envoyproxy.io/v1alpha1
    kind: EnvoyProxy
    metadata:
      name: envoy-proxy-certificate-config
    spec:
#      logging:
#        level:
#          default: debug
#          router: trace
#          connection: trace
#          upstream: debug
#          grpc: trace
#          forward_proxy: debug
#          ext_authz: debug
#          secret: debug
#          tracing: debug
#          filter: debug
#          http: trace
#          http2: trace
#          backtrace: trace
#          runtime: trace
      telemetry:
        accessLog:
          settings:
            - format:
                json:
                  start_time: "%START_TIME%"
                  method: "%REQ(:METHOD)%"
                  path: "%REQ(:PATH)%"
                  protocol: "%PROTOCOL%"
                  response_code: "%RESPONSE_CODE%"
                  response_code_details: "%RESPONSE_CODE_DETAILS%"
                  response_flags: "%RESPONSE_FLAGS%"
                  bytes_received: "%BYTES_RECEIVED%"
                  bytes_sent: "%BYTES_SENT%"
                  duration: "%DURATION%"
                  upstream_service_time: "%RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)%"
                  upstream_host: "%UPSTREAM_HOST%"
                  upstream_cluster: "%UPSTREAM_CLUSTER%"
                  upstream_local_address: "%UPSTREAM_LOCAL_ADDRESS%"
                  upstream_transport_failure_reason: "%UPSTREAM_TRANSPORT_FAILURE_REASON%"
                  upstream_address: "%UPSTREAM_HOST%"
                  user_agent: "%REQ(USER-AGENT)%"
                  referer: "%REQ(REFERER)%"
                  x_forwarded_for: "%REQ(X-FORWARDED-FOR)%"
                  x_request_id: "%REQ(X-REQUEST-ID)%"
                  x_envoy_original_path: "%REQ(X-ENVOY-ORIGINAL-PATH)%"
                  remote_address: "%DOWNSTREAM_REMOTE_ADDRESS%"
                  downstream_local_address: "%DOWNSTREAM_LOCAL_ADDRESS%"
                  authority: "%REQ(:AUTHORITY)%"
                  scheme: "%REQ(:SCHEME)%"
                  request_headers_bytes: "%REQUEST_HEADERS_BYTES%"
                  response_headers_bytes: "%RESPONSE_HEADERS_BYTES%"
                type: JSON
              sinks:
                - file:
                    path: /dev/stdout
                  type: File
      #  Enable once the open-telemetry will be o the cluster
      #    tracing:
      #      samplingRate: 100
      #      provider:
      #        host: otel-collector-dns.monitoring.svc.cluster.local
      #        port: 4317
      #        type: OpenTelemetry
      #    metrics:
      #      sinks:
      #        - type: OpenTelemetry
      #          openTelemetry:
      #            host: otel-collector-dns.monitoring.svc.cluster.local
      #            port: 4317
      #      prometheus:
      #        disable: true
      provider:
        type: Kubernetes
        kubernetes:
          envoyService:
            annotations:
              cert.gardener.cloud/purpose: managed
              cert.gardener.cloud/secretname: ingress-certificate-gateway-secret
              dns.gardener.cloud/class: garden
              dns.gardener.cloud/ttl: "500"
              dns.gardener.cloud/dnsnames: ing.cert.<replace>.kms20.shoot.canary.k8s-hana.ondemand.com
          envoyHpa:
            minReplicas: 1
            maxReplicas: 5
            metrics:
              - resource:
                  name: cpu
                  target:
                    averageUtilization: 80
                    type: Utilization
                type: Resource
          envoyDeployment:
            replicas: 1
            pod:
              annotations:
                linkerd.io/inject: enabled
              labels:
                ingress-gateway.cmk.kms.cloud.sap/instance: ingress-certificate-gateway
              affinity:
                podAntiAffinity:
                  preferredDuringSchedulingIgnoredDuringExecution:
                    - weight: 100
                      podAffinityTerm:
                        labelSelector:
                          matchExpressions:
                            - key: ingress-gateway.cmk.kms.cloud.sap/instance
                              operator: In
                              values:
                                - ingress-certificate-gateway
                        topologyKey: kubernetes.io/hostname
              topologySpreadConstraints:
                - maxSkew: 1
                  topologyKey: kubernetes.io/hostname
                  whenUnsatisfiable: ScheduleAnyway
                  labelSelector:
                    matchExpressions:
                      - key: ingress-gateway.cmk.kms.cloud.sap/instance
                        operator: In
                        values:
                          - ingress-certificate-gateway
                - maxSkew: 1
                  topologyKey: topology.kubernetes.io/zone
                  whenUnsatisfiable: ScheduleAnyway
                  labelSelector:
                    matchExpressions:
                      - key: ingress-gateway.cmk.kms.cloud.sap/instance
                        operator: In
                        values:
                          - ingress-certificate-gateway
            container:
              image: envoyproxy/envoy:v1.35-latest
              resources:
                requests:
                  cpu: 100m
                  memory: 64Mi
#                limits:
#                  cpu: 1000m
#                  memory: Gi
