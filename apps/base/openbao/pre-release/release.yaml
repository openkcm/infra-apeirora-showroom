apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: openbao--pre-release
spec:
  interval: 10m
  releaseName: openbao--pre-release
  chart:
    spec:
      chart: ./tools/charts/generic
      sourceRef:
        kind: GitRepository
        name: flux-system
        namespace: flux-system
  install:
    createNamespace: false
    remediation:
      retries: -1
      remediateLastFailure: true
  upgrade:
    remediation:
      retries: -1
      remediateLastFailure: true
  values:
    resources:
      externalsecret-postgres-storage:
        apiVersion: external-secrets.io/v1
        kind: ExternalSecret
        metadata:
          name: openbao-postgres-storage
        spec:
          refreshInterval: 5m
          secretStoreRef:
            name: kubernetes-local-all
            kind: ClusterSecretStore
          target:
            name: openbao-postgres-storage
            creationPolicy: Owner
            template:
              type: Opaque
              engineVersion: v2
              data:
                config.hcl: |-
                  storage "postgresql" {
                    connection_url = "postgres://openbao:{{ .openbao }}@openbao-postgresql.openbao.svc.cluster.local:5432/openbao?sslmode=require"
                  }
          data:
            - secretKey: openbao
              remoteRef:
                key: openbao.openbao-postgresql.credentials.postgresql.acid.zalan.do
                property: password
      issuer-openbao-selfsigned:
        apiVersion: cert-manager.io/v1
        kind: Issuer
        metadata:
          name: openbao-selfsigned
        spec:
          selfSigned: {}
      openbao-server-ca:
        apiVersion: cert-manager.io/v1
        kind: Certificate
        metadata:
          name: openbao-server-ca
        spec:
          isCA: true
          secretName: openbao-server-ca-secret
          commonName: openbao-server-ca
          privateKey:
            algorithm: RSA
            size: 2048
          issuerRef:
            name: openbao-selfsigned
            kind: Issuer
      openbao-server-ca-issuer:
        apiVersion: cert-manager.io/v1
        kind: Issuer
        metadata:
          name: openbao-server-ca-issuer
        spec:
          ca:
            secretName: openbao-server-ca-secret
      certificate-openbao-tls:
        apiVersion: cert-manager.io/v1
        kind: Certificate
        metadata:
          name: openbao-tls
        spec:
          secretName: openbao-tls
          commonName: openbao.openbao.svc
          dnsNames:
            - openbao.openbao.svc
            - openbao.openbao.svc.cluster.local
          issuerRef:
            name: openbao-server-ca-issuer
            kind: Issuer
      injector-selfsigned-ca:
        apiVersion: cert-manager.io/v1
        kind: Certificate
        metadata:
          name: injector-selfsigned-ca
        spec:
          isCA: true
          commonName: Agent Inject CA
          secretName: injector-ca-secret
          duration: 87660h  # 10 years
          privateKey:
            algorithm: ECDSA
            size: 256
          issuerRef:
            name: openbao-selfsigned
            kind: Issuer
            group: cert-manager.io
      injector-ca-issuer:
        apiVersion: cert-manager.io/v1
        kind: Issuer
        metadata:
          name: injector-ca-issuer
        spec:
          ca:
            secretName: injector-ca-secret
      injector-certificate:
        apiVersion: cert-manager.io/v1
        kind: Certificate
        metadata:
          name: injector-certificate
        spec:
          secretName: injector-tls
          duration: 24h
          renewBefore: 144m  # roughly 10% of 24h
          dnsNames:
          - openbao-agent-injector-svc
          - openbao-agent-injector-svc.openbao
          - openbao-agent-injector-svc.openbao.svc
          issuerRef:
            name: injector-ca-issuer
          commonName: Agent Inject Cert
      openbao-client-ca-bootstrap:
        apiVersion: cert-manager.io/v1
        kind: Issuer
        metadata:
          name: openbao-client-ca-bootstrap
        spec:
          selfSigned: {}
      openbao-client-ca:
        apiVersion: cert-manager.io/v1
        kind: Certificate
        metadata:
          name: openbao-client-ca
        spec:
          isCA: true
          secretName: openbao-client-ca-secret
          commonName: openbao-client-ca
          privateKey:
            rotationPolicy: Always
            algorithm: RSA
            size: 2048
          issuerRef:
            name: openbao-client-ca-bootstrap
            kind: Issuer
      openbao-client-issuer:
        apiVersion: cert-manager.io/v1
        kind: Issuer
        metadata:
          name: openbao-client-issuer
        spec:
          ca:
            secretName: openbao-client-ca-secret
      app1-client-certificate:
        apiVersion: cert-manager.io/v1
        kind: Certificate
        metadata:
          name: app1-client
        spec:
          secretName: app1-client-cert
          secretTemplate:
            annotations:
              openbao.cert.auth/policy: app1-policy
          commonName: app1-client
          usages:
            - digital signature
            - key encipherment
            - client auth
          privateKey:
            rotationPolicy: Always
            algorithm: RSA
            size: 2048
          issuerRef:
            name: openbao-client-issuer
            kind: Issuer
      openbao-admin-client-certificate:
        apiVersion: cert-manager.io/v1
        kind: Certificate
        metadata:
          name: openbao-admin
        spec:
          secretName: openbao-admin-cert
          secretTemplate:
            annotations:
              openbao.cert.auth/policy: admin-policy
          commonName: openbao-admin
          usages:
            - digital signature
            - key encipherment
            - client auth
          privateKey:
            rotationPolicy: Always
            algorithm: RSA
            size: 2048
          issuerRef:
            name: openbao-client-issuer
            kind: Issuer
      namespace-admin-client-certificate:
        apiVersion: cert-manager.io/v1
        kind: Certificate
        metadata:
          name: namespace-admin
        spec:
          secretName: namespace-admin-client-cert
          secretTemplate:
            annotations:
              openbao.cert.auth/policy: namespace-admin-policy
          commonName: namespace-admin
          usages:
            - digital signature
            - key encipherment
            - client auth
          privateKey:
            rotationPolicy: Always
            algorithm: RSA
            size: 2048
          issuerRef:
            name: openbao-client-issuer
            kind: Issuer
      key-admin-client-certificate:
        apiVersion: cert-manager.io/v1
        kind: Certificate
        metadata:
          name: key-admin
        spec:
          secretName: key-admin-client-cert
          secretTemplate:
            annotations:
              openbao.cert.auth/policy: key-admin-policy
          commonName: key-admin
          usages:
            - digital signature
            - key encipherment
            - client auth
          privateKey:
            rotationPolicy: Always
            algorithm: RSA
            size: 2048
          issuerRef:
            name: openbao-client-issuer
            kind: Issuer
      openbao-policy-app1:
        apiVersion: v1
        kind: Secret
        metadata:
          name: openbao-policy-app1
        type: Opaque
        stringData:
          app1-policy.hcl: |
            path "kv/data/app1/*" {
              capabilities = ["read", "list"]
            }
      openbao-policy-admin:
        apiVersion: v1
        kind: Secret
        metadata:
          name: openbao-policy-admin
        type: Opaque
        stringData:
          admin-policy.hcl: |
            # Admin policy (explicit paths; refine further later)
            path "auth/token/lookup-self" {
              capabilities = ["read","update"]
            }
            path "auth/token/lookup" {
              capabilities = ["read","update"]
            }
            path "auth/token/renew-self" {
              capabilities = ["read","update"]
            }
            path "auth/token/renew" {
              capabilities = ["read","update"]
            }
            path "auth/token/revoke-self" {
              capabilities = ["read","update"]
            }
            path "sys/policies/acl/*" {
              capabilities = ["create","read","update","delete","list"]
            }
            path "sys/mounts/*" {
              capabilities = ["create","read","update","delete","list","sudo"]
            }
            path "transit/*" {
              capabilities = ["create","read","update","delete","list","sudo"]
            }
            path "secret/*" {
              capabilities = ["create","read","update","delete","list"]
            }
            # JWT auth management
            path "auth/jwt/*" {
              capabilities = ["create","read","update","delete","list","sudo"]
            }
            # Fallback read/list only for everything else
            path "*" {
              capabilities = ["read","list"]
            }
      openbao-policy-namespace-admin:
        apiVersion: v1
        kind: Secret
        metadata:
          name: openbao-policy-namespace-admin
        type: Opaque
        stringData:
          namespace-admin-policy.hcl: |
            # NOTE: Namespace management only works in Enterprise editions. May be ignored in OSS.
            path "sys/namespaces/*" {
              capabilities = ["create","read","update","delete","list"]
            }
            # Allow listing mounts for context
            path "sys/mounts" {
              capabilities = ["read"]
            }
            path "sys/mounts/*" {
              capabilities = ["read","list"]
            }
            # Token self lookup
            path "auth/token/lookup-self" {
              capabilities = ["read"]
            }
            path "auth/token/renew-self" {
              capabilities = ["read","update"]
            }
      openbao-policy-key-admin:
        apiVersion: v1
        kind: Secret
        metadata:
          name: openbao-policy-key-admin
        type: Opaque
        stringData:
          key-admin-policy.hcl: |
            # Manage KV secrets across mounts (v2 common names secret/ and kv/ if present)
            path "secret/*" {
              capabilities = ["create","read","update","delete","list"]
            }
            path "kv/*" {
              capabilities = ["create","read","update","delete","list"]
            }
            # Transit key management
            path "transit/keys/*" {
              capabilities = ["create","read","update","delete","list"]
            }
            path "transit/encrypt/*" {
              capabilities = ["update","read"]
            }
            path "transit/decrypt/*" {
              capabilities = ["update","read"]
            }
            # Token self ops
            path "auth/token/lookup-self" {
              capabilities = ["read"]
            }
            path "auth/token/renew-self" {
              capabilities = ["read","update"]
            }
      openbao-cert-auth-rbac:
        apiVersion: v1
        kind: List
        metadata:
          name: openbao-cert-auth-rbac-bundle
        items:
          - apiVersion: v1
            kind: ServiceAccount
            metadata:
              name: openbao-cert-auth-sync
          - apiVersion: rbac.authorization.k8s.io/v1
            kind: Role
            metadata:
              name: openbao-cert-auth-sync
            rules:
              - apiGroups: [""]
                resources: ["secrets"]
                verbs: ["get", "list"]
          - apiVersion: rbac.authorization.k8s.io/v1
            kind: RoleBinding
            metadata:
              name: openbao-cert-auth-sync
            subjects:
              - kind: ServiceAccount
                name: openbao-cert-auth-sync
            roleRef:
              kind: Role
              name: openbao-cert-auth-sync
              apiGroup: rbac.authorization.k8s.io
      openbao-cert-auth-cronjob:
        apiVersion: batch/v1
        kind: CronJob
        metadata:
          name: openbao-cert-auth-sync
        spec:
          schedule: "*/10 * * * *"
          successfulJobsHistoryLimit: 1
          failedJobsHistoryLimit: 3
          jobTemplate:
            spec:
              template:
                spec:
                  serviceAccountName: openbao-cert-auth-sync
                  restartPolicy: Never
                  volumes:
                    - name: root-token
                      secret:
                        secretName: openbao-root
                    - name: tls
                      secret:
                        secretName: openbao-tls
                    - name: admin-client-cert
                      secret:
                        secretName: openbao-admin-cert
                  containers:
                    - name: sync
                      image: alpine:3.19
                      volumeMounts:
                        - name: root-token
                          mountPath: /root-token
                          readOnly: true
                        - name: tls
                          mountPath: /tls
                          readOnly: true
                        - name: admin-client-cert
                          mountPath: /admin
                          readOnly: true
                      command: ["sh","-c"]
                      args:
                         - |
                          set -e
                          apk add --no-cache curl jq ca-certificates bash || true
                          # kubectl not in alpine base repos by default; use lightweight client 'kubectl' via curl if absent
                          if ! command -v kubectl >/dev/null 2>&1; then
                            echo "[sync] Installing kubectl (standalone binary)";
                            curl -sL https://dl.k8s.io/release/v1.30.0/bin/linux/amd64/kubectl -o /usr/local/bin/kubectl;
                            chmod +x /usr/local/bin/kubectl;
                          fi
                          command -v kubectl >/dev/null 2>&1 || { echo "[sync] kubectl install failed"; exit 1; }
                          HOST="https://openbao.openbao.svc:8200"
                          TOKEN=$(cat /root-token/root-token)
                          # Determine CA to trust: prefer /tls/ca.crt if present else /tls/tls.crt (self-signed cert includes its own cert as CA)
                          if [ -f /tls/ca.crt ]; then CA_CERT=/tls/ca.crt; else CA_CERT=/tls/tls.crt; fi
                          CLIENT_CERT=/admin/tls.crt
                          CLIENT_KEY=/admin/tls.key
                          if [ ! -f "$CLIENT_CERT" ] || [ ! -f "$CLIENT_KEY" ]; then echo "[sync] Missing admin client cert/key for mTLS; exiting."; exit 1; fi
                          echo "[sync] Waiting for unseal..."
                          until curl --cacert $CA_CERT --cert $CLIENT_CERT --key $CLIENT_KEY -s $HOST/v1/sys/seal-status | grep '"sealed":false' >/dev/null; do sleep 3; done
                          echo "[sync] Ensure cert auth enabled..."
                          if ! curl --cacert $CA_CERT --cert $CLIENT_CERT --key $CLIENT_KEY -s -H "X-Vault-Token: $TOKEN" $HOST/v1/sys/auth | jq -e 'has("cert/")' >/dev/null 2>&1; then
                          curl --cacert $CA_CERT --cert $CLIENT_CERT --key $CLIENT_KEY -s -H "X-Vault-Token: $TOKEN" -X POST $HOST/v1/sys/auth/cert -d '{"type":"cert"}'
                          echo "[sync] Enabled cert auth";
                          fi
                          echo "[sync] Ensure jwt auth enabled..."
                          if ! curl --cacert $CA_CERT --cert $CLIENT_CERT --key $CLIENT_KEY -s -H "X-Vault-Token: $TOKEN" $HOST/v1/sys/auth | jq -e 'has("jwt/")' >/dev/null 2>&1; then
                            curl --cacert $CA_CERT --cert $CLIENT_CERT --key $CLIENT_KEY -s -H "X-Vault-Token: $TOKEN" -X POST $HOST/v1/sys/auth/jwt -d '{"type":"jwt"}' && echo "[sync] Enabled jwt auth" || echo "[sync] Failed to enable jwt auth";
                          fi
                          JWT_ISSUER="https://discovery.ingress.garden.gardener.cc-one.showroom.apeirora.eu/projects/kms/shoots/53ec7160-dfe7-47b0-9d96-75daa9c7a687/issuer"
                          echo "[sync] Configuring jwt auth (issuer=$JWT_ISSUER)..."
                          curl --cacert $CA_CERT --cert $CLIENT_CERT --key $CLIENT_KEY -s -H "X-Vault-Token: $TOKEN" -X POST $HOST/v1/auth/jwt/config -d '{"oidc_discovery_url":"'$JWT_ISSUER'","default_role":"jwt-admin","bound_issuer":"'$JWT_ISSUER'"}' >/dev/null || echo "[sync] jwt config failed (may already exist)"
                          echo "[sync] Upserting jwt-admin role..."
                          curl --cacert $CA_CERT --cert $CLIENT_CERT --key $CLIENT_KEY -s -H "X-Vault-Token: $TOKEN" -X POST $HOST/v1/auth/jwt/role/jwt-admin -d '{"user_claim":"sub","bound_audiences":["vault","openbao","api"],"policies":["admin-policy"],"token_ttl":"1h","token_max_ttl":"2h"}' >/dev/null || echo "[sync] jwt-admin role failed"
                          echo "[sync] Syncing policy secrets into Vault..."
                          for PSEC in $(kubectl -n openbao get secrets -o json | jq -r '.items[] | select(.metadata.name | startswith("openbao-policy-")) | .metadata.name'); do
                            for KEY in $(kubectl -n openbao get secret "$PSEC" -o json | jq -r '.data | keys[]'); do
                              PNAME=$(echo "$KEY" | sed 's/.hcl$//')
                              PCONTENT=$(kubectl -n openbao get secret "$PSEC" -o json | jq -r --arg k "$KEY" '.data[$k]' | base64 -d)
                              if [ -z "$PCONTENT" ]; then echo "[sync] Empty policy content for $PNAME in $PSEC; skipping"; continue; fi
                              echo "[sync] Upserting policy $PNAME"
                              curl --cacert $CA_CERT --cert $CLIENT_CERT --key $CLIENT_KEY -s -H "X-Vault-Token: $TOKEN" -X PUT $HOST/v1/sys/policies/acl/$PNAME -d "{\"policy\":$(printf '%s' "$PCONTENT" | jq -Rs .)}" >/dev/null || echo "[sync] Failed to upsert policy $PNAME"
                            done
                          done
                          echo "[sync] Ensuring transit mount..."
                          if ! curl --cacert $CA_CERT --cert $CLIENT_CERT --key $CLIENT_KEY -s -H "X-Vault-Token: $TOKEN" $HOST/v1/sys/mounts | jq -e 'has("transit/")' >/dev/null 2>&1; then
                            curl --cacert $CA_CERT --cert $CLIENT_CERT --key $CLIENT_KEY -s -H "X-Vault-Token: $TOKEN" -X POST $HOST/v1/sys/mounts/transit -d '{"type":"transit"}' && echo "[sync] Mounted transit" || echo "[sync] Failed to mount transit"
                          fi
                          echo "[sync] Processing annotated secrets..."
                          for S in $(kubectl -n openbao get secrets -o json | jq -r '.items[] | select(.metadata.annotations["openbao.cert.auth/policy"]) | .metadata.name'); do
                          POLICY=$(kubectl -n openbao get secret "$S" -o jsonpath='{.metadata.annotations.openbao\.cert\.auth/policy}')
                          echo "[sync] Found annotated secret $S (policies=$POLICY)"
                          CERT_PEM=$(kubectl -n openbao get secret "$S" -o jsonpath='{.data.tls\.crt}' | base64 -d || true)
                          if [ -z "$CERT_PEM" ]; then echo "[sync] Empty certificate data in $S; skipping"; continue; fi
                          echo "[sync] Mapping $S -> $POLICY"
                          PAYLOAD=$(printf '%s' "$CERT_PEM" | jq -Rs --arg policies "$POLICY" '{certificate: ., policies: $policies, ttl: "1h"}')
                          curl --cacert $CA_CERT --cert $CLIENT_CERT --key $CLIENT_KEY -s -H "X-Vault-Token: $TOKEN" -X POST "$HOST/v1/auth/cert/certs/$S" -d "$PAYLOAD" >/dev/null
                          curl --cacert $CA_CERT --cert $CLIENT_CERT --key $CLIENT_KEY -s -H "X-Vault-Token: $TOKEN" $HOST/v1/auth/cert/certs/$S | jq '.policies' >/dev/null || { echo "[sync] Verification failed for $S"; exit 1; }
                          done
                          echo "[sync] Done."
