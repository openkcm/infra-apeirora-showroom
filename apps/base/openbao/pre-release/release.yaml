apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: openbao--pre-release
spec:
  interval: 10m
  releaseName: openbao--pre-release
  chart:
    spec:
      chart: ./tools/charts/generic
      sourceRef:
        kind: GitRepository
        name: flux-system
        namespace: flux-system
  install:
    createNamespace: false
    remediation:
      retries: -1
      remediateLastFailure: true
  upgrade:
    remediation:
      retries: -1
      remediateLastFailure: true
  values:
    resources:
      externalsecret-postgres-storage:
        apiVersion: external-secrets.io/v1
        kind: ExternalSecret
        metadata:
          name: openbao-postgres-storage
        spec:
          refreshInterval: 5m
          secretStoreRef:
            name: kubernetes-local-all
            kind: ClusterSecretStore
          target:
            name: openbao-postgres-storage
            creationPolicy: Owner
            template:
              type: Opaque
              engineVersion: v2
              data:
                config.hcl: |-
                  storage "postgresql" {
                    connection_url = "postgres://openbao:{{ .openbao }}@openbao-postgresql.openbao.svc.cluster.local:5432/openbao?sslmode=require"
                  }
          data:
            - secretKey: openbao
              remoteRef:
                key: openbao.openbao-postgresql.credentials.postgresql.acid.zalan.do
                property: password
      issuer-openbao-selfsigned:
        apiVersion: cert-manager.io/v1
        kind: Issuer
        metadata:
          name: openbao-selfsigned
        spec:
          selfSigned: {}
      certificate-openbao-tls:
        apiVersion: cert-manager.io/v1
        kind: Certificate
        metadata:
          name: openbao-tls
        spec:
          secretName: openbao-tls
          dnsNames:
            - openbao.openbao.svc
            - openbao.openbao.svc.cluster.local
          issuerRef:
            name: openbao-selfsigned
            kind: Issuer
      injector-selfsigned-ca:
        apiVersion: cert-manager.io/v1
        kind: Certificate
        metadata:
          name: injector-selfsigned-ca
        spec:
          isCA: true
          commonName: Agent Inject CA
          secretName: injector-ca-secret
          duration: 87660h  # 10 years
          privateKey:
            algorithm: ECDSA
            size: 256
          issuerRef:
            name: openbao-selfsigned
            kind: Issuer
            group: cert-manager.io
      injector-ca-issuer:
        apiVersion: cert-manager.io/v1
        kind: Issuer
        metadata:
          name: injector-ca-issuer
        spec:
          ca:
            secretName: injector-ca-secret
      injector-certificate:
        apiVersion: cert-manager.io/v1
        kind: Certificate
        metadata:
          name: injector-certificate
        spec:
          secretName: injector-tls
          duration: 24h
          renewBefore: 144m  # roughly 10% of 24h
          dnsNames:
          - openbao-agent-injector-svc
          - openbao-agent-injector-svc.openbao
          - openbao-agent-injector-svc.openbao.svc
          issuerRef:
            name: injector-ca-issuer
          commonName: Agent Inject Cert
      openbao-client-ca-bootstrap:
        apiVersion: cert-manager.io/v1
        kind: Issuer
        metadata:
          name: openbao-client-ca-bootstrap
        spec:
          selfSigned: {}
      openbao-client-ca:
        apiVersion: cert-manager.io/v1
        kind: Certificate
        metadata:
          name: openbao-client-ca
        spec:
          isCA: true
          secretName: openbao-client-ca-secret
          commonName: openbao-client-ca
          privateKey:
            rotationPolicy: Always
            algorithm: RSA
            size: 2048
          issuerRef:
            name: openbao-client-ca-bootstrap
            kind: Issuer
      openbao-client-issuer:
        apiVersion: cert-manager.io/v1
        kind: Issuer
        metadata:
          name: openbao-client-issuer
        spec:
          ca:
            secretName: openbao-client-ca-secret
      app1-client-certificate:
        apiVersion: cert-manager.io/v1
        kind: Certificate
        metadata:
          name: app1-client
          annotations:
            openbao.cert.auth/policy: app1-policy
        spec:
          secretName: app1-client-cert
          commonName: app1-client
          privateKey:
            rotationPolicy: Always
            algorithm: RSA
            size: 2048
          issuerRef:
            name: openbao-client-issuer
            kind: Issuer
      openbao-policy-app1:
        apiVersion: v1
        kind: Secret
        metadata:
          name: openbao-policy-app1
        type: Opaque
        stringData:
          app1-policy.hcl: |
            path "kv/data/app1/*" {
              capabilities = ["read", "list"]
            }
      openbao-cert-auth-rbac:
        apiVersion: v1
        kind: List
        metadata:
          name: openbao-cert-auth-rbac-bundle
        items:
          - apiVersion: v1
            kind: ServiceAccount
            metadata:
              name: openbao-cert-auth-sync
          - apiVersion: rbac.authorization.k8s.io/v1
            kind: Role
            metadata:
              name: openbao-cert-auth-sync
            rules:
              - apiGroups: [""]
                resources: ["secrets"]
                verbs: ["get", "list"]
          - apiVersion: rbac.authorization.k8s.io/v1
            kind: RoleBinding
            metadata:
              name: openbao-cert-auth-sync
            subjects:
              - kind: ServiceAccount
                name: openbao-cert-auth-sync
            roleRef:
              kind: Role
              name: openbao-cert-auth-sync
              apiGroup: rbac.authorization.k8s.io
      openbao-cert-auth-cronjob:
        apiVersion: batch/v1
        kind: CronJob
        metadata:
          name: openbao-cert-auth-sync
        spec:
          schedule: "*/10 * * * *"
          successfulJobsHistoryLimit: 1
          failedJobsHistoryLimit: 3
          jobTemplate:
            spec:
              template:
                spec:
                  serviceAccountName: openbao-cert-auth-sync
                  restartPolicy: Never
                  volumes:
                    - name: root-token
                      secret:
                        secretName: openbao-root
                    - name: tls
                      secret:
                        secretName: openbao-tls
                  containers:
                    - name: sync
                      image: alpine:3.19
                      volumeMounts:
                        - name: root-token
                          mountPath: /root-token
                          readOnly: true
                        - name: tls
                          mountPath: /tls
                          readOnly: true
                      command: ["sh","-c"]
                      args:
                         - |
                          set -e
                          apk add --no-cache curl jq ca-certificates bash || true
                          HOST="https://openbao.openbao.svc:8200"
                          TOKEN=$(cat /root-token/root-token)
                          # Determine CA to trust: prefer /tls/ca.crt if present else /tls/tls.crt (self-signed cert includes its own cert as CA)
                          if [ -f /tls/ca.crt ]; then CA_CERT=/tls/ca.crt; else CA_CERT=/tls/tls.crt; fi
                          echo "[sync] Waiting for unseal..."
                          until curl --cacert $CA_CERT -s $HOST/v1/sys/seal-status | grep '"sealed":false' >/dev/null; do sleep 3; done
                          echo "[sync] Ensure cert auth enabled..."
                          if ! curl --cacert $CA_CERT -s -H "X-Vault-Token: $TOKEN" $HOST/v1/sys/auth | jq -e 'has("cert/")' >/dev/null 2>&1; then
                          curl --cacert $CA_CERT -s -H "X-Vault-Token: $TOKEN" -X POST $HOST/v1/sys/auth/cert -d '{"type":"cert"}'
                          echo "[sync] Enabled cert auth";
                          fi
                          echo "[sync] Processing annotated secrets..."
                          for S in $(kubectl -n openbao get secrets -o json | jq -r '.items[] | select(.metadata.annotations["openbao.cert.auth/policy"]) | .metadata.name'); do
                          POLICY=$(kubectl -n openbao get secret "$S" -o jsonpath='{.metadata.annotations.openbao\.cert\.auth/policy}')
                          CERT=$(kubectl -n openbao get secret "$S" -o jsonpath='{.data.tls\.crt}' | base64 -d)
                          echo "[sync] Mapping $S -> $POLICY"
                          PAYLOAD=$(printf '{"certificate":"%s","policies":"%s","ttl":"1h"}' "$(printf '%s' "$CERT")" "$POLICY")
                          curl --cacert $CA_CERT -s -H "X-Vault-Token: $TOKEN" -X POST "$HOST/v1/auth/cert/certs/$S" -d "$PAYLOAD"
                          curl --cacert $CA_CERT -s -H "X-Vault-Token: $TOKEN" $HOST/v1/auth/cert/certs/$S | jq '.policies' >/dev/null || { echo "[sync] Verification failed for $S"; exit 1; }
                          done
                          echo "[sync] Done."
